---
layout: single
title : "spring 면접 질문 2일차"
categories: spring 면접 질문
tag: [java, Spring]
toc: true
author_profile: true
---

## spring 면접 질문

# 10. 개발자로서 본인의 장단점과 근거가 되는 경험을 말씀해주실 수 있을까요?(협업 능력 제외)

저의  개발자다운 장점은 목표 설정에 따른 리팩토링에 있습니다.
최근 실제 서비스 구현을 위해 5명의 팀원들과 프로젝트를 진행했습니다.
같은 백엔드 팀원과 전날 항상 다음날에 대한 목표를 설정하고 계획을 세웠습니다.
물론 그 목표를 항상 달성하지는 못했지만 팀원과 세운 계획들로  기존에 할 수 없었던 기능들을 구현하는 등 많은 성장을 했습니다.
그날의 목표를 달성하면 기존의 목표를 달성하지 못했던 계획들을 다시 리팩토링할 수 있었고 이번 주의 실패를 다음 주의 성공으로 바꿀 수 있었습니다.
이런 매일매일 목표를 설정했던 장점은 과도하게 설정해 단점으로도 작용했습니다.
과도한 욕심으로 목표를 너무 많이 설정했고 목표를 달성하더라도 달성 후 하루 정도 긴 번아웃 상태를 경험했습니다.
 팀원과 다시 대화 후 목표 설정량을 조절해 그 후 문제점을 리팩토링해서 프로젝트를 잘 끝낼 수 있었습니다.
이 단점은 새로운 프로젝트를 시작할 때 다시 경험할 수 있기에 기록해서 잘 대처할 생각입니다.


# 11. JPA는 언제 필요하고 언제 필요하지 않은지 설명해주실 수 있을까요?

JPA는 ORM이라는 관계형 DB의 데이터를 매핑 시켜주는 기술의 표준을 말합니다.
JPA를 사용하지 않는다면 DB의 데이터 CRUD를 하나하나 쿼리를 작성해서 코딩해야 합니다.
JPA를 사용함으로 각각의 해당 CRUD에 맞는 쿼리를 다시 작성할 필요가 없어 필드가 추가되거나 수정할 때 유지 보수와 생산성을 높일 수 있습니다.
하지만 데이터 통계처리나 복잡한 조회가 필요한 상황에는 JPA보다는 SQL을 사용하는 것이 적합합니다.
JPA는 만들 수는 있지만 쿼리문 자체가 복잡해지고 구현이 어려우며 만들었다 해도 오타율이 높기 때문에 위와 같은 상황에는 필요하지 않습니다.


# 12. JPA의 더티 체킹이란 무엇인가요?

더티 체킹이란 상태 변경 검사라는 의미로 트랜잭션 안에서 엔티티의 변경이 일어나면 변경 내용을 자동으로 DB에 반영하는 JPA의 특징입니다.